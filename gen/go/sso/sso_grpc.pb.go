// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sso/sso.proto

package sortify_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sortify_AuthByCode_FullMethodName = "/auth.Sortify/AuthByCode"
	Sortify_User_FullMethodName       = "/auth.Sortify/User"
)

// SortifyClient is the client API for Sortify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortifyClient interface {
	AuthByCode(ctx context.Context, in *AuthByCodeRequest, opts ...grpc.CallOption) (*AuthByCodeResponse, error)
	User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type sortifyClient struct {
	cc grpc.ClientConnInterface
}

func NewSortifyClient(cc grpc.ClientConnInterface) SortifyClient {
	return &sortifyClient{cc}
}

func (c *sortifyClient) AuthByCode(ctx context.Context, in *AuthByCodeRequest, opts ...grpc.CallOption) (*AuthByCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthByCodeResponse)
	err := c.cc.Invoke(ctx, Sortify_AuthByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sortifyClient) User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Sortify_User_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SortifyServer is the server API for Sortify service.
// All implementations must embed UnimplementedSortifyServer
// for forward compatibility.
type SortifyServer interface {
	AuthByCode(context.Context, *AuthByCodeRequest) (*AuthByCodeResponse, error)
	User(context.Context, *UserRequest) (*UserResponse, error)
	mustEmbedUnimplementedSortifyServer()
}

// UnimplementedSortifyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSortifyServer struct{}

func (UnimplementedSortifyServer) AuthByCode(context.Context, *AuthByCodeRequest) (*AuthByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByCode not implemented")
}
func (UnimplementedSortifyServer) User(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedSortifyServer) mustEmbedUnimplementedSortifyServer() {}
func (UnimplementedSortifyServer) testEmbeddedByValue()                 {}

// UnsafeSortifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortifyServer will
// result in compilation errors.
type UnsafeSortifyServer interface {
	mustEmbedUnimplementedSortifyServer()
}

func RegisterSortifyServer(s grpc.ServiceRegistrar, srv SortifyServer) {
	// If the following call pancis, it indicates UnimplementedSortifyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sortify_ServiceDesc, srv)
}

func _Sortify_AuthByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortifyServer).AuthByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sortify_AuthByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortifyServer).AuthByCode(ctx, req.(*AuthByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sortify_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortifyServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sortify_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortifyServer).User(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sortify_ServiceDesc is the grpc.ServiceDesc for Sortify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sortify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Sortify",
	HandlerType: (*SortifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthByCode",
			Handler:    _Sortify_AuthByCode_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Sortify_User_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
